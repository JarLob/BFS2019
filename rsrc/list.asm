0x0:	add	byte ptr [rax - 0x75], cl
0x0:	add	ebx, eax
0x0:	ret	
0x0:	ret	
0x0:	ret	
=======================
0x1:	add	dword ptr [rax - 0x75], ecx
0x1:	add	ebx, eax
0x1:	ret	
0x1:	ret	
0x1:	ret	
=======================
0x2:	add	cl, byte ptr [rax - 0x75]
0x2:	add	ebx, eax
0x2:	ret	
0x2:	ret	
0x2:	ret	
=======================
0x3:	add	ecx, dword ptr [rax - 0x75]
0x3:	add	ebx, eax
0x3:	ret	
0x3:	ret	
0x3:	ret	
=======================
0x4:	add	al, 0x48
0x4:	mov	eax, dword ptr [rcx]
0x4:	ret	
0x4:	ret	
0x4:	ret	
0x4:	ret	
=======================
0x5:	add	eax, 0xc3018b48
0x5:	ret	
0x5:	ret	
0x5:	ret	
=======================
=======================
=======================
0x8:	or	byte ptr [rax - 0x75], cl
0x8:	add	ebx, eax
0x8:	ret	
0x8:	ret	
0x8:	ret	
=======================
0x9:	or	dword ptr [rax - 0x75], ecx
0x9:	add	ebx, eax
0x9:	ret	
0x9:	ret	
0x9:	ret	
=======================
0xa:	or	cl, byte ptr [rax - 0x75]
0xa:	add	ebx, eax
0xa:	ret	
0xa:	ret	
0xa:	ret	
=======================
0xb:	or	ecx, dword ptr [rax - 0x75]
0xb:	add	ebx, eax
0xb:	ret	
0xb:	ret	
0xb:	ret	
=======================
0xc:	or	al, 0x48
0xc:	mov	eax, dword ptr [rcx]
0xc:	ret	
0xc:	ret	
0xc:	ret	
0xc:	ret	
=======================
0xd:	or	eax, 0xc3018b48
0xd:	ret	
0xd:	ret	
0xd:	ret	
=======================
=======================
0xf:	cmovs	ecx, dword ptr [rbx - 0x3c3c3cff]
0xf:	ret	
=======================
0x10:	adc	byte ptr [rax - 0x75], cl
0x10:	add	ebx, eax
0x10:	ret	
0x10:	ret	
0x10:	ret	
=======================
0x11:	adc	dword ptr [rax - 0x75], ecx
0x11:	add	ebx, eax
0x11:	ret	
0x11:	ret	
0x11:	ret	
=======================
0x12:	adc	cl, byte ptr [rax - 0x75]
0x12:	add	ebx, eax
0x12:	ret	
0x12:	ret	
0x12:	ret	
=======================
0x13:	adc	ecx, dword ptr [rax - 0x75]
0x13:	add	ebx, eax
0x13:	ret	
0x13:	ret	
0x13:	ret	
=======================
0x14:	adc	al, 0x48
0x14:	mov	eax, dword ptr [rcx]
0x14:	ret	
0x14:	ret	
0x14:	ret	
0x14:	ret	
=======================
0x15:	adc	eax, 0xc3018b48
0x15:	ret	
0x15:	ret	
0x15:	ret	
=======================
=======================
=======================
0x18:	sbb	byte ptr [rax - 0x75], cl
0x18:	add	ebx, eax
0x18:	ret	
0x18:	ret	
0x18:	ret	
=======================
0x19:	sbb	dword ptr [rax - 0x75], ecx
0x19:	add	ebx, eax
0x19:	ret	
0x19:	ret	
0x19:	ret	
=======================
0x1a:	sbb	cl, byte ptr [rax - 0x75]
0x1a:	add	ebx, eax
0x1a:	ret	
0x1a:	ret	
0x1a:	ret	
=======================
0x1b:	sbb	ecx, dword ptr [rax - 0x75]
0x1b:	add	ebx, eax
0x1b:	ret	
0x1b:	ret	
0x1b:	ret	
=======================
0x1c:	sbb	al, 0x48
0x1c:	mov	eax, dword ptr [rcx]
0x1c:	ret	
0x1c:	ret	
0x1c:	ret	
0x1c:	ret	
=======================
0x1d:	sbb	eax, 0xc3018b48
0x1d:	ret	
0x1d:	ret	
0x1d:	ret	
=======================
=======================
=======================
0x20:	and	byte ptr [rax - 0x75], cl
0x20:	add	ebx, eax
0x20:	ret	
0x20:	ret	
0x20:	ret	
=======================
0x21:	and	dword ptr [rax - 0x75], ecx
0x21:	add	ebx, eax
0x21:	ret	
0x21:	ret	
0x21:	ret	
=======================
0x22:	and	cl, byte ptr [rax - 0x75]
0x22:	add	ebx, eax
0x22:	ret	
0x22:	ret	
0x22:	ret	
=======================
0x23:	and	ecx, dword ptr [rax - 0x75]
0x23:	add	ebx, eax
0x23:	ret	
0x23:	ret	
0x23:	ret	
=======================
0x24:	and	al, 0x48
0x24:	mov	eax, dword ptr [rcx]
0x24:	ret	
0x24:	ret	
0x24:	ret	
0x24:	ret	
=======================
0x25:	and	eax, 0xc3018b48
0x25:	ret	
0x25:	ret	
0x25:	ret	
=======================
0x26:	mov	rax, qword ptr es:[rcx]
0x26:	ret	
0x26:	ret	
0x26:	ret	
0x26:	ret	
=======================
=======================
0x28:	sub	byte ptr [rax - 0x75], cl
0x28:	add	ebx, eax
0x28:	ret	
0x28:	ret	
0x28:	ret	
=======================
0x29:	sub	dword ptr [rax - 0x75], ecx
0x29:	add	ebx, eax
0x29:	ret	
0x29:	ret	
0x29:	ret	
=======================
0x2a:	sub	cl, byte ptr [rax - 0x75]
0x2a:	add	ebx, eax
0x2a:	ret	
0x2a:	ret	
0x2a:	ret	
=======================
0x2b:	sub	ecx, dword ptr [rax - 0x75]
0x2b:	add	ebx, eax
0x2b:	ret	
0x2b:	ret	
0x2b:	ret	
=======================
0x2c:	sub	al, 0x48
0x2c:	mov	eax, dword ptr [rcx]
0x2c:	ret	
0x2c:	ret	
0x2c:	ret	
0x2c:	ret	
=======================
0x2d:	sub	eax, 0xc3018b48
0x2d:	ret	
0x2d:	ret	
0x2d:	ret	
=======================
0x2e:	mov	rax, qword ptr cs:[rcx]
0x2e:	ret	
0x2e:	ret	
0x2e:	ret	
0x2e:	ret	
=======================
=======================
0x30:	xor	byte ptr [rax - 0x75], cl
0x30:	add	ebx, eax
0x30:	ret	
0x30:	ret	
0x30:	ret	
=======================
0x31:	xor	dword ptr [rax - 0x75], ecx
0x31:	add	ebx, eax
0x31:	ret	
0x31:	ret	
0x31:	ret	
=======================
0x32:	xor	cl, byte ptr [rax - 0x75]
0x32:	add	ebx, eax
0x32:	ret	
0x32:	ret	
0x32:	ret	
=======================
0x33:	xor	ecx, dword ptr [rax - 0x75]
0x33:	add	ebx, eax
0x33:	ret	
0x33:	ret	
0x33:	ret	
=======================
0x34:	xor	al, 0x48
0x34:	mov	eax, dword ptr [rcx]
0x34:	ret	
0x34:	ret	
0x34:	ret	
0x34:	ret	
=======================
0x35:	xor	eax, 0xc3018b48
0x35:	ret	
0x35:	ret	
0x35:	ret	
=======================
0x36:	mov	rax, qword ptr ss:[rcx]
0x36:	ret	
0x36:	ret	
0x36:	ret	
0x36:	ret	
=======================
=======================
0x38:	cmp	byte ptr [rax - 0x75], cl
0x38:	add	ebx, eax
0x38:	ret	
0x38:	ret	
0x38:	ret	
=======================
0x39:	cmp	dword ptr [rax - 0x75], ecx
0x39:	add	ebx, eax
0x39:	ret	
0x39:	ret	
0x39:	ret	
=======================
0x3a:	cmp	cl, byte ptr [rax - 0x75]
0x3a:	add	ebx, eax
0x3a:	ret	
0x3a:	ret	
0x3a:	ret	
=======================
0x3b:	cmp	ecx, dword ptr [rax - 0x75]
0x3b:	add	ebx, eax
0x3b:	ret	
0x3b:	ret	
0x3b:	ret	
=======================
0x3c:	cmp	al, 0x48
0x3c:	mov	eax, dword ptr [rcx]
0x3c:	ret	
0x3c:	ret	
0x3c:	ret	
0x3c:	ret	
=======================
0x3d:	cmp	eax, 0xc3018b48
0x3d:	ret	
0x3d:	ret	
0x3d:	ret	
=======================
0x3e:	mov	rax, qword ptr ds:[rcx]
0x3e:	ret	
0x3e:	ret	
0x3e:	ret	
0x3e:	ret	
=======================
=======================
0x40:	mov	rax, qword ptr [rcx]
0x40:	ret	
0x40:	ret	
0x40:	ret	
0x40:	ret	
=======================
0x41:	mov	rax, qword ptr [rcx]
0x41:	ret	
0x41:	ret	
0x41:	ret	
0x41:	ret	
=======================
0x42:	mov	rax, qword ptr [rcx]
0x42:	ret	
0x42:	ret	
0x42:	ret	
0x42:	ret	
=======================
0x43:	mov	rax, qword ptr [rcx]
0x43:	ret	
0x43:	ret	
0x43:	ret	
0x43:	ret	
=======================
0x44:	mov	rax, qword ptr [rcx]
0x44:	ret	
0x44:	ret	
0x44:	ret	
0x44:	ret	
=======================
0x45:	mov	rax, qword ptr [rcx]
0x45:	ret	
0x45:	ret	
0x45:	ret	
0x45:	ret	
=======================
0x46:	mov	rax, qword ptr [rcx]
0x46:	ret	
0x46:	ret	
0x46:	ret	
0x46:	ret	
=======================
0x47:	mov	rax, qword ptr [rcx]
0x47:	ret	
0x47:	ret	
0x47:	ret	
0x47:	ret	
=======================
0x48:	mov	rax, qword ptr [rcx]
0x48:	ret	
0x48:	ret	
0x48:	ret	
0x48:	ret	
=======================
0x49:	mov	rax, qword ptr [rcx]
0x49:	ret	
0x49:	ret	
0x49:	ret	
0x49:	ret	
=======================
0x4a:	mov	rax, qword ptr [rcx]
0x4a:	ret	
0x4a:	ret	
0x4a:	ret	
0x4a:	ret	
=======================
0x4b:	mov	rax, qword ptr [rcx]
0x4b:	ret	
0x4b:	ret	
0x4b:	ret	
0x4b:	ret	
=======================
0x4c:	mov	rax, qword ptr [rcx]
0x4c:	ret	
0x4c:	ret	
0x4c:	ret	
0x4c:	ret	
=======================
0x4d:	mov	rax, qword ptr [rcx]
0x4d:	ret	
0x4d:	ret	
0x4d:	ret	
0x4d:	ret	
=======================
0x4e:	mov	rax, qword ptr [rcx]
0x4e:	ret	
0x4e:	ret	
0x4e:	ret	
0x4e:	ret	
=======================
0x4f:	mov	rax, qword ptr [rcx]
0x4f:	ret	
0x4f:	ret	
0x4f:	ret	
0x4f:	ret	
=======================
0x50:	push	rax
0x50:	mov	rax, qword ptr [rcx]
0x50:	ret	
0x50:	ret	
0x50:	ret	
0x50:	ret	
=======================
0x51:	push	rcx
0x51:	mov	rax, qword ptr [rcx]
0x51:	ret	
0x51:	ret	
0x51:	ret	
0x51:	ret	
=======================
0x52:	push	rdx
0x52:	mov	rax, qword ptr [rcx]
0x52:	ret	
0x52:	ret	
0x52:	ret	
0x52:	ret	
=======================
0x53:	push	rbx
0x53:	mov	rax, qword ptr [rcx]
0x53:	ret	
0x53:	ret	
0x53:	ret	
0x53:	ret	
=======================
0x54:	push	rsp
0x54:	mov	rax, qword ptr [rcx]
0x54:	ret	
0x54:	ret	
0x54:	ret	
0x54:	ret	
=======================
0x55:	push	rbp
0x55:	mov	rax, qword ptr [rcx]
0x55:	ret	
0x55:	ret	
0x55:	ret	
0x55:	ret	
=======================
0x56:	push	rsi
0x56:	mov	rax, qword ptr [rcx]
0x56:	ret	
0x56:	ret	
0x56:	ret	
0x56:	ret	
=======================
0x57:	push	rdi
0x57:	mov	rax, qword ptr [rcx]
0x57:	ret	
0x57:	ret	
0x57:	ret	
0x57:	ret	
=======================
0x58:	pop	rax
0x58:	mov	rax, qword ptr [rcx]
0x58:	ret	
0x58:	ret	
0x58:	ret	
0x58:	ret	
=======================
0x59:	pop	rcx
0x59:	mov	rax, qword ptr [rcx]
0x59:	ret	
0x59:	ret	
0x59:	ret	
0x59:	ret	
=======================
0x5a:	pop	rdx
0x5a:	mov	rax, qword ptr [rcx]
0x5a:	ret	
0x5a:	ret	
0x5a:	ret	
0x5a:	ret	
=======================
0x5b:	pop	rbx
0x5b:	mov	rax, qword ptr [rcx]
0x5b:	ret	
0x5b:	ret	
0x5b:	ret	
0x5b:	ret	
=======================
0x5c:	pop	rsp
0x5c:	mov	rax, qword ptr [rcx]
0x5c:	ret	
0x5c:	ret	
0x5c:	ret	
0x5c:	ret	
=======================
0x5d:	pop	rbp
0x5d:	mov	rax, qword ptr [rcx]
0x5d:	ret	
0x5d:	ret	
0x5d:	ret	
0x5d:	ret	
=======================
0x5e:	pop	rsi
0x5e:	mov	rax, qword ptr [rcx]
0x5e:	ret	
0x5e:	ret	
0x5e:	ret	
0x5e:	ret	
=======================
0x5f:	pop	rdi
0x5f:	mov	rax, qword ptr [rcx]
0x5f:	ret	
0x5f:	ret	
0x5f:	ret	
0x5f:	ret	
=======================
=======================
=======================
=======================
0x63:	movsxd	rcx, dword ptr [rax - 0x75]
0x63:	add	ebx, eax
0x63:	ret	
0x63:	ret	
0x63:	ret	
=======================
0x64:	mov	rax, qword ptr fs:[rcx]
0x64:	ret	
0x64:	ret	
0x64:	ret	
0x64:	ret	
=======================
0x65:	mov	rax, qword ptr gs:[rcx]
0x65:	ret	
0x65:	ret	
0x65:	ret	
0x65:	ret	
=======================
0x66:	mov	rax, qword ptr [rcx]
0x66:	ret	
0x66:	ret	
0x66:	ret	
0x66:	ret	
=======================
0x67:	mov	rax, qword ptr [ecx]
0x67:	ret	
0x67:	ret	
0x67:	ret	
0x67:	ret	
=======================
0x68:	push	-0x3cfe74b8
0x68:	ret	
0x68:	ret	
0x68:	ret	
=======================
0x69:	imul	ecx, dword ptr [rax - 0x75], 0xc3c3c301
0x69:	ret	
=======================
0x6a:	push	0x48
0x6a:	mov	eax, dword ptr [rcx]
0x6a:	ret	
0x6a:	ret	
0x6a:	ret	
0x6a:	ret	
=======================
0x6b:	imul	ecx, dword ptr [rax - 0x75], 1
0x6b:	ret	
0x6b:	ret	
0x6b:	ret	
0x6b:	ret	
=======================
0x6c:	insb	byte ptr [rdi], dx
0x6c:	mov	rax, qword ptr [rcx]
0x6c:	ret	
0x6c:	ret	
0x6c:	ret	
0x6c:	ret	
=======================
0x6d:	insd	dword ptr [rdi], dx
0x6d:	mov	rax, qword ptr [rcx]
0x6d:	ret	
0x6d:	ret	
0x6d:	ret	
0x6d:	ret	
=======================
0x6e:	outsb	dx, byte ptr [rsi]
0x6e:	mov	rax, qword ptr [rcx]
0x6e:	ret	
0x6e:	ret	
0x6e:	ret	
0x6e:	ret	
=======================
0x6f:	outsd	dx, dword ptr [rsi]
0x6f:	mov	rax, qword ptr [rcx]
0x6f:	ret	
0x6f:	ret	
0x6f:	ret	
0x6f:	ret	
=======================
0x70:	jo	0x104a
0x70:	mov	eax, dword ptr [rcx]
0x70:	ret	
0x70:	ret	
0x70:	ret	
0x70:	ret	
=======================
0x71:	jno	0x104a
0x71:	mov	eax, dword ptr [rcx]
0x71:	ret	
0x71:	ret	
0x71:	ret	
0x71:	ret	
=======================
0x72:	jb	0x104a
0x72:	mov	eax, dword ptr [rcx]
0x72:	ret	
0x72:	ret	
0x72:	ret	
0x72:	ret	
=======================
0x73:	jae	0x104a
0x73:	mov	eax, dword ptr [rcx]
0x73:	ret	
0x73:	ret	
0x73:	ret	
0x73:	ret	
=======================
0x74:	je	0x104a
0x74:	mov	eax, dword ptr [rcx]
0x74:	ret	
0x74:	ret	
0x74:	ret	
0x74:	ret	
=======================
0x75:	jne	0x104a
0x75:	mov	eax, dword ptr [rcx]
0x75:	ret	
0x75:	ret	
0x75:	ret	
0x75:	ret	
=======================
0x76:	jbe	0x104a
0x76:	mov	eax, dword ptr [rcx]
0x76:	ret	
0x76:	ret	
0x76:	ret	
0x76:	ret	
=======================
0x77:	ja	0x104a
0x77:	mov	eax, dword ptr [rcx]
0x77:	ret	
0x77:	ret	
0x77:	ret	
0x77:	ret	
=======================
0x78:	js	0x104a
0x78:	mov	eax, dword ptr [rcx]
0x78:	ret	
0x78:	ret	
0x78:	ret	
0x78:	ret	
=======================
0x79:	jns	0x104a
0x79:	mov	eax, dword ptr [rcx]
0x79:	ret	
0x79:	ret	
0x79:	ret	
0x79:	ret	
=======================
0x7a:	jp	0x104a
0x7a:	mov	eax, dword ptr [rcx]
0x7a:	ret	
0x7a:	ret	
0x7a:	ret	
0x7a:	ret	
=======================
0x7b:	jnp	0x104a
0x7b:	mov	eax, dword ptr [rcx]
0x7b:	ret	
0x7b:	ret	
0x7b:	ret	
0x7b:	ret	
=======================
0x7c:	jl	0x104a
0x7c:	mov	eax, dword ptr [rcx]
0x7c:	ret	
0x7c:	ret	
0x7c:	ret	
0x7c:	ret	
=======================
0x7d:	jge	0x104a
0x7d:	mov	eax, dword ptr [rcx]
0x7d:	ret	
0x7d:	ret	
0x7d:	ret	
0x7d:	ret	
=======================
0x7e:	jle	0x104a
0x7e:	mov	eax, dword ptr [rcx]
0x7e:	ret	
0x7e:	ret	
0x7e:	ret	
0x7e:	ret	
=======================
0x7f:	jg	0x104a
0x7f:	mov	eax, dword ptr [rcx]
0x7f:	ret	
0x7f:	ret	
0x7f:	ret	
0x7f:	ret	
=======================
0x80:	or	byte ptr [rax - 0x75], 1
0x80:	ret	
0x80:	ret	
0x80:	ret	
0x80:	ret	
=======================
0x81:	or	dword ptr [rax - 0x75], 0xc3c3c301
0x81:	ret	
=======================
=======================
0x83:	or	dword ptr [rax - 0x75], 1
0x83:	ret	
0x83:	ret	
0x83:	ret	
0x83:	ret	
=======================
0x84:	test	byte ptr [rax - 0x75], cl
0x84:	add	ebx, eax
0x84:	ret	
0x84:	ret	
0x84:	ret	
=======================
0x85:	test	dword ptr [rax - 0x75], ecx
0x85:	add	ebx, eax
0x85:	ret	
0x85:	ret	
0x85:	ret	
=======================
0x86:	xchg	byte ptr [rax - 0x75], cl
0x86:	add	ebx, eax
0x86:	ret	
0x86:	ret	
0x86:	ret	
=======================
0x87:	xchg	dword ptr [rax - 0x75], ecx
0x87:	add	ebx, eax
0x87:	ret	
0x87:	ret	
0x87:	ret	
=======================
0x88:	mov	byte ptr [rax - 0x75], cl
0x88:	add	ebx, eax
0x88:	ret	
0x88:	ret	
0x88:	ret	
=======================
0x89:	mov	dword ptr [rax - 0x75], ecx
0x89:	add	ebx, eax
0x89:	ret	
0x89:	ret	
0x89:	ret	
=======================
0x8a:	mov	cl, byte ptr [rax - 0x75]
0x8a:	add	ebx, eax
0x8a:	ret	
0x8a:	ret	
0x8a:	ret	
=======================
0x8b:	mov	ecx, dword ptr [rax - 0x75]
0x8b:	add	ebx, eax
0x8b:	ret	
0x8b:	ret	
0x8b:	ret	
=======================
0x8c:	mov	word ptr [rax - 0x75], cs
0x8c:	add	ebx, eax
0x8c:	ret	
0x8c:	ret	
0x8c:	ret	
=======================
0x8d:	lea	ecx, [rax - 0x75]
0x8d:	add	ebx, eax
0x8d:	ret	
0x8d:	ret	
0x8d:	ret	
=======================
0x8e:	mov	cs, word ptr [rax - 0x75]
0x8e:	add	ebx, eax
0x8e:	ret	
0x8e:	ret	
0x8e:	ret	
=======================
=======================
0x90:	nop	
0x90:	mov	rax, qword ptr [rcx]
0x90:	ret	
0x90:	ret	
0x90:	ret	
0x90:	ret	
=======================
0x91:	xchg	eax, ecx
0x91:	mov	rax, qword ptr [rcx]
0x91:	ret	
0x91:	ret	
0x91:	ret	
0x91:	ret	
=======================
0x92:	xchg	eax, edx
0x92:	mov	rax, qword ptr [rcx]
0x92:	ret	
0x92:	ret	
0x92:	ret	
0x92:	ret	
=======================
0x93:	xchg	eax, ebx
0x93:	mov	rax, qword ptr [rcx]
0x93:	ret	
0x93:	ret	
0x93:	ret	
0x93:	ret	
=======================
0x94:	xchg	eax, esp
0x94:	mov	rax, qword ptr [rcx]
0x94:	ret	
0x94:	ret	
0x94:	ret	
0x94:	ret	
=======================
0x95:	xchg	eax, ebp
0x95:	mov	rax, qword ptr [rcx]
0x95:	ret	
0x95:	ret	
0x95:	ret	
0x95:	ret	
=======================
0x96:	xchg	eax, esi
0x96:	mov	rax, qword ptr [rcx]
0x96:	ret	
0x96:	ret	
0x96:	ret	
0x96:	ret	
=======================
0x97:	xchg	eax, edi
0x97:	mov	rax, qword ptr [rcx]
0x97:	ret	
0x97:	ret	
0x97:	ret	
0x97:	ret	
=======================
0x98:	cwde	
0x98:	mov	rax, qword ptr [rcx]
0x98:	ret	
0x98:	ret	
0x98:	ret	
0x98:	ret	
=======================
0x99:	cdq	
0x99:	mov	rax, qword ptr [rcx]
0x99:	ret	
0x99:	ret	
0x99:	ret	
0x99:	ret	
=======================
=======================
0x9b:	wait	
0x9b:	mov	rax, qword ptr [rcx]
0x9b:	ret	
0x9b:	ret	
0x9b:	ret	
0x9b:	ret	
=======================
0x9c:	pushfq	
0x9c:	mov	rax, qword ptr [rcx]
0x9c:	ret	
0x9c:	ret	
0x9c:	ret	
0x9c:	ret	
=======================
0x9d:	popfq	
0x9d:	mov	rax, qword ptr [rcx]
0x9d:	ret	
0x9d:	ret	
0x9d:	ret	
0x9d:	ret	
=======================
0x9e:	sahf	
0x9e:	mov	rax, qword ptr [rcx]
0x9e:	ret	
0x9e:	ret	
0x9e:	ret	
0x9e:	ret	
=======================
0x9f:	lahf	
0x9f:	mov	rax, qword ptr [rcx]
0x9f:	ret	
0x9f:	ret	
0x9f:	ret	
0x9f:	ret	
=======================
=======================
=======================
=======================
=======================
0xa4:	movsb	byte ptr [rdi], byte ptr [rsi]
0xa4:	mov	rax, qword ptr [rcx]
0xa4:	ret	
0xa4:	ret	
0xa4:	ret	
0xa4:	ret	
=======================
0xa5:	movsd	dword ptr [rdi], dword ptr [rsi]
0xa5:	mov	rax, qword ptr [rcx]
0xa5:	ret	
0xa5:	ret	
0xa5:	ret	
0xa5:	ret	
=======================
0xa6:	cmpsb	byte ptr [rsi], byte ptr [rdi]
0xa6:	mov	rax, qword ptr [rcx]
0xa6:	ret	
0xa6:	ret	
0xa6:	ret	
0xa6:	ret	
=======================
0xa7:	cmpsd	dword ptr [rsi], dword ptr [rdi]
0xa7:	mov	rax, qword ptr [rcx]
0xa7:	ret	
0xa7:	ret	
0xa7:	ret	
0xa7:	ret	
=======================
0xa8:	test	al, 0x48
0xa8:	mov	eax, dword ptr [rcx]
0xa8:	ret	
0xa8:	ret	
0xa8:	ret	
0xa8:	ret	
=======================
0xa9:	test	eax, 0xc3018b48
0xa9:	ret	
0xa9:	ret	
0xa9:	ret	
=======================
0xaa:	stosb	byte ptr [rdi], al
0xaa:	mov	rax, qword ptr [rcx]
0xaa:	ret	
0xaa:	ret	
0xaa:	ret	
0xaa:	ret	
=======================
0xab:	stosd	dword ptr [rdi], eax
0xab:	mov	rax, qword ptr [rcx]
0xab:	ret	
0xab:	ret	
0xab:	ret	
0xab:	ret	
=======================
0xac:	lodsb	al, byte ptr [rsi]
0xac:	mov	rax, qword ptr [rcx]
0xac:	ret	
0xac:	ret	
0xac:	ret	
0xac:	ret	
=======================
0xad:	lodsd	eax, dword ptr [rsi]
0xad:	mov	rax, qword ptr [rcx]
0xad:	ret	
0xad:	ret	
0xad:	ret	
0xad:	ret	
=======================
0xae:	scasb	al, byte ptr [rdi]
0xae:	mov	rax, qword ptr [rcx]
0xae:	ret	
0xae:	ret	
0xae:	ret	
0xae:	ret	
=======================
0xaf:	scasd	eax, dword ptr [rdi]
0xaf:	mov	rax, qword ptr [rcx]
0xaf:	ret	
0xaf:	ret	
0xaf:	ret	
0xaf:	ret	
=======================
0xb0:	mov	al, 0x48
0xb0:	mov	eax, dword ptr [rcx]
0xb0:	ret	
0xb0:	ret	
0xb0:	ret	
0xb0:	ret	
=======================
0xb1:	mov	cl, 0x48
0xb1:	mov	eax, dword ptr [rcx]
0xb1:	ret	
0xb1:	ret	
0xb1:	ret	
0xb1:	ret	
=======================
0xb2:	mov	dl, 0x48
0xb2:	mov	eax, dword ptr [rcx]
0xb2:	ret	
0xb2:	ret	
0xb2:	ret	
0xb2:	ret	
=======================
0xb3:	mov	bl, 0x48
0xb3:	mov	eax, dword ptr [rcx]
0xb3:	ret	
0xb3:	ret	
0xb3:	ret	
0xb3:	ret	
=======================
0xb4:	mov	ah, 0x48
0xb4:	mov	eax, dword ptr [rcx]
0xb4:	ret	
0xb4:	ret	
0xb4:	ret	
0xb4:	ret	
=======================
0xb5:	mov	ch, 0x48
0xb5:	mov	eax, dword ptr [rcx]
0xb5:	ret	
0xb5:	ret	
0xb5:	ret	
0xb5:	ret	
=======================
0xb6:	mov	dh, 0x48
0xb6:	mov	eax, dword ptr [rcx]
0xb6:	ret	
0xb6:	ret	
0xb6:	ret	
0xb6:	ret	
=======================
0xb7:	mov	bh, 0x48
0xb7:	mov	eax, dword ptr [rcx]
0xb7:	ret	
0xb7:	ret	
0xb7:	ret	
0xb7:	ret	
=======================
0xb8:	mov	eax, 0xc3018b48
0xb8:	ret	
0xb8:	ret	
0xb8:	ret	
=======================
0xb9:	mov	ecx, 0xc3018b48
0xb9:	ret	
0xb9:	ret	
0xb9:	ret	
=======================
0xba:	mov	edx, 0xc3018b48
0xba:	ret	
0xba:	ret	
0xba:	ret	
=======================
0xbb:	mov	ebx, 0xc3018b48
0xbb:	ret	
0xbb:	ret	
0xbb:	ret	
=======================
0xbc:	mov	esp, 0xc3018b48
0xbc:	ret	
0xbc:	ret	
0xbc:	ret	
=======================
0xbd:	mov	ebp, 0xc3018b48
0xbd:	ret	
0xbd:	ret	
0xbd:	ret	
=======================
0xbe:	mov	esi, 0xc3018b48
0xbe:	ret	
0xbe:	ret	
0xbe:	ret	
=======================
0xbf:	mov	edi, 0xc3018b48
0xbf:	ret	
0xbf:	ret	
0xbf:	ret	
=======================
0xc0:	ror	byte ptr [rax - 0x75], 1
0xc0:	ret	
0xc0:	ret	
0xc0:	ret	
0xc0:	ret	
=======================
0xc1:	ror	dword ptr [rax - 0x75], 1
0xc1:	ret	
0xc1:	ret	
0xc1:	ret	
0xc1:	ret	
=======================
0xc2:	ret	0x8b48
0xc2:	add	ebx, eax
0xc2:	ret	
0xc2:	ret	
0xc2:	ret	
=======================
0xc3:	ret	
0xc3:	mov	rax, qword ptr [rcx]
0xc3:	ret	
0xc3:	ret	
0xc3:	ret	
0xc3:	ret	
=======================
=======================
=======================
=======================
=======================
0xc8:	enter	-0x74b8, 1
0xc8:	ret	
0xc8:	ret	
0xc8:	ret	
0xc8:	ret	
=======================
0xc9:	leave	
0xc9:	mov	rax, qword ptr [rcx]
0xc9:	ret	
0xc9:	ret	
0xc9:	ret	
0xc9:	ret	
=======================
0xca:	retf	0x8b48
0xca:	add	ebx, eax
0xca:	ret	
0xca:	ret	
0xca:	ret	
=======================
0xcb:	retf	
0xcb:	mov	rax, qword ptr [rcx]
0xcb:	ret	
0xcb:	ret	
0xcb:	ret	
0xcb:	ret	
=======================
0xcc:	int3	
0xcc:	mov	rax, qword ptr [rcx]
0xcc:	ret	
0xcc:	ret	
0xcc:	ret	
0xcc:	ret	
=======================
0xcd:	int	0x48
0xcd:	mov	eax, dword ptr [rcx]
0xcd:	ret	
0xcd:	ret	
0xcd:	ret	
0xcd:	ret	
=======================
=======================
0xcf:	iretd	
0xcf:	mov	rax, qword ptr [rcx]
0xcf:	ret	
0xcf:	ret	
0xcf:	ret	
0xcf:	ret	
=======================
0xd0:	ror	byte ptr [rax - 0x75], 1
0xd0:	add	ebx, eax
0xd0:	ret	
0xd0:	ret	
0xd0:	ret	
=======================
0xd1:	ror	dword ptr [rax - 0x75], 1
0xd1:	add	ebx, eax
0xd1:	ret	
0xd1:	ret	
0xd1:	ret	
=======================
0xd2:	ror	byte ptr [rax - 0x75], cl
0xd2:	add	ebx, eax
0xd2:	ret	
0xd2:	ret	
0xd2:	ret	
=======================
0xd3:	ror	dword ptr [rax - 0x75], cl
0xd3:	add	ebx, eax
0xd3:	ret	
0xd3:	ret	
0xd3:	ret	
=======================
=======================
=======================
=======================
0xd7:	xlatb	
0xd7:	mov	rax, qword ptr [rcx]
0xd7:	ret	
0xd7:	ret	
0xd7:	ret	
0xd7:	ret	
=======================
0xd8:	fmul	dword ptr [rax - 0x75]
0xd8:	add	ebx, eax
0xd8:	ret	
0xd8:	ret	
0xd8:	ret	
=======================
=======================
0xda:	fimul	dword ptr [rax - 0x75]
0xda:	add	ebx, eax
0xda:	ret	
0xda:	ret	
0xda:	ret	
=======================
0xdb:	fisttp	dword ptr [rax - 0x75]
0xdb:	add	ebx, eax
0xdb:	ret	
0xdb:	ret	
0xdb:	ret	
=======================
0xdc:	fmul	qword ptr [rax - 0x75]
0xdc:	add	ebx, eax
0xdc:	ret	
0xdc:	ret	
0xdc:	ret	
=======================
0xdd:	fisttp	qword ptr [rax - 0x75]
0xdd:	add	ebx, eax
0xdd:	ret	
0xdd:	ret	
0xdd:	ret	
=======================
0xde:	fimul	word ptr [rax - 0x75]
0xde:	add	ebx, eax
0xde:	ret	
0xde:	ret	
0xde:	ret	
=======================
0xdf:	fisttp	word ptr [rax - 0x75]
0xdf:	add	ebx, eax
0xdf:	ret	
0xdf:	ret	
0xdf:	ret	
=======================
0xe0:	loopne	0x104a
0xe0:	mov	eax, dword ptr [rcx]
0xe0:	ret	
0xe0:	ret	
0xe0:	ret	
0xe0:	ret	
=======================
0xe1:	loope	0x104a
0xe1:	mov	eax, dword ptr [rcx]
0xe1:	ret	
0xe1:	ret	
0xe1:	ret	
0xe1:	ret	
=======================
0xe2:	loop	0x104a
0xe2:	mov	eax, dword ptr [rcx]
0xe2:	ret	
0xe2:	ret	
0xe2:	ret	
0xe2:	ret	
=======================
0xe3:	jrcxz	0x104a
0xe3:	mov	eax, dword ptr [rcx]
0xe3:	ret	
0xe3:	ret	
0xe3:	ret	
0xe3:	ret	
=======================
0xe4:	in	al, 0x48
0xe4:	mov	eax, dword ptr [rcx]
0xe4:	ret	
0xe4:	ret	
0xe4:	ret	
0xe4:	ret	
=======================
0xe5:	in	eax, 0x48
0xe5:	mov	eax, dword ptr [rcx]
0xe5:	ret	
0xe5:	ret	
0xe5:	ret	
0xe5:	ret	
=======================
0xe6:	out	0x48, al
0xe6:	mov	eax, dword ptr [rcx]
0xe6:	ret	
0xe6:	ret	
0xe6:	ret	
0xe6:	ret	
=======================
0xe7:	out	0x48, eax
0xe7:	mov	eax, dword ptr [rcx]
0xe7:	ret	
0xe7:	ret	
0xe7:	ret	
0xe7:	ret	
=======================
0xe8:	call	0xffffffffc3019b4d
0xe8:	ret	
0xe8:	ret	
0xe8:	ret	
=======================
0xe9:	jmp	0xffffffffc3019b4d
0xe9:	ret	
0xe9:	ret	
0xe9:	ret	
=======================
=======================
0xeb:	jmp	0x104a
0xeb:	mov	eax, dword ptr [rcx]
0xeb:	ret	
0xeb:	ret	
0xeb:	ret	
0xeb:	ret	
=======================
0xec:	in	al, dx
0xec:	mov	rax, qword ptr [rcx]
0xec:	ret	
0xec:	ret	
0xec:	ret	
0xec:	ret	
=======================
0xed:	in	eax, dx
0xed:	mov	rax, qword ptr [rcx]
0xed:	ret	
0xed:	ret	
0xed:	ret	
0xed:	ret	
=======================
0xee:	out	dx, al
0xee:	mov	rax, qword ptr [rcx]
0xee:	ret	
0xee:	ret	
0xee:	ret	
0xee:	ret	
=======================
0xef:	out	dx, eax
0xef:	mov	rax, qword ptr [rcx]
0xef:	ret	
0xef:	ret	
0xef:	ret	
0xef:	ret	
=======================
=======================
0xf1:	int1	
0xf1:	mov	rax, qword ptr [rcx]
0xf1:	ret	
0xf1:	ret	
0xf1:	ret	
0xf1:	ret	
=======================
0xf2:	mov	rax, qword ptr [rcx]
0xf2:	ret	
0xf2:	ret	
0xf2:	ret	
0xf2:	ret	
=======================
0xf3:	mov	rax, qword ptr [rcx]
0xf3:	ret	
0xf3:	ret	
0xf3:	ret	
0xf3:	ret	
=======================
0xf4:	hlt	
0xf4:	mov	rax, qword ptr [rcx]
0xf4:	ret	
0xf4:	ret	
0xf4:	ret	
0xf4:	ret	
=======================
0xf5:	cmc	
0xf5:	mov	rax, qword ptr [rcx]
0xf5:	ret	
0xf5:	ret	
0xf5:	ret	
0xf5:	ret	
=======================
0xf6:	test	byte ptr [rax - 0x75], 1
0xf6:	ret	
0xf6:	ret	
0xf6:	ret	
0xf6:	ret	
=======================
0xf7:	test	dword ptr [rax - 0x75], 0xc3c3c301
0xf7:	ret	
=======================
0xf8:	clc	
0xf8:	mov	rax, qword ptr [rcx]
0xf8:	ret	
0xf8:	ret	
0xf8:	ret	
0xf8:	ret	
=======================
0xf9:	stc	
0xf9:	mov	rax, qword ptr [rcx]
0xf9:	ret	
0xf9:	ret	
0xf9:	ret	
0xf9:	ret	
=======================
0xfa:	cli	
0xfa:	mov	rax, qword ptr [rcx]
0xfa:	ret	
0xfa:	ret	
0xfa:	ret	
0xfa:	ret	
=======================
0xfb:	sti	
0xfb:	mov	rax, qword ptr [rcx]
0xfb:	ret	
0xfb:	ret	
0xfb:	ret	
0xfb:	ret	
=======================
0xfc:	cld	
0xfc:	mov	rax, qword ptr [rcx]
0xfc:	ret	
0xfc:	ret	
0xfc:	ret	
0xfc:	ret	
=======================
0xfd:	std	
0xfd:	mov	rax, qword ptr [rcx]
0xfd:	ret	
0xfd:	ret	
0xfd:	ret	
0xfd:	ret	
=======================
0xfe:	dec	byte ptr [rax - 0x75]
0xfe:	add	ebx, eax
0xfe:	ret	
0xfe:	ret	
0xfe:	ret	
=======================
0xff:	dec	dword ptr [rax - 0x75]
0xff:	add	ebx, eax
0xff:	ret	
0xff:	ret	
0xff:	ret	
=======================
